//----------------------------------------------------------------------------------------------------------------------
//	ConcurrencyPrimitives-Apple.cpp			Â©2018 Stevo Brock	All rights reserved.
//----------------------------------------------------------------------------------------------------------------------

#include "ConcurrencyPrimitives.h"

//----------------------------------------------------------------------------------------------------------------------
// MARK: CSharedResourceInternals

class CSharedResourceInternals {
	public:
		CSharedResourceInternals(UInt32 count) : mSemaphore(::dispatch_semaphore_create(count)) {}
		~CSharedResourceInternals()
			{ ::dispatch_release(mSemaphore); }

		dispatch_semaphore_t	mSemaphore;
};

//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// MARK: - CSharedResource

// MARK: Lifecycle methods

//----------------------------------------------------------------------------------------------------------------------
CSharedResource::CSharedResource(UInt32 count)
//----------------------------------------------------------------------------------------------------------------------
{
	mInternals = new CSharedResourceInternals(count);
}

//----------------------------------------------------------------------------------------------------------------------
CSharedResource::~CSharedResource()
//----------------------------------------------------------------------------------------------------------------------
{
	Delete(mInternals);
}

// MARK: Instance methods

//----------------------------------------------------------------------------------------------------------------------
void CSharedResource::consume() const
//----------------------------------------------------------------------------------------------------------------------
{
	::dispatch_semaphore_wait(mInternals->mSemaphore, DISPATCH_TIME_FOREVER);
}

//----------------------------------------------------------------------------------------------------------------------
void CSharedResource::release() const
//----------------------------------------------------------------------------------------------------------------------
{
	::dispatch_semaphore_signal(mInternals->mSemaphore);
}
