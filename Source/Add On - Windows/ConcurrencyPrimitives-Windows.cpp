//----------------------------------------------------------------------------------------------------------------------
//	ConcurrencyPrimitives-Windows.cpp			Â©2018 Stevo Brock	All rights reserved.
//----------------------------------------------------------------------------------------------------------------------

#include "ConcurrencyPrimitives.h"

#undef Delete
#include <Windows.h>
#define Delete(x)		{ delete x; x = nil; }

//----------------------------------------------------------------------------------------------------------------------
// MARK: CLockInternals

class CLockInternals {
public:
	CLockInternals()
		{
			::InitializeCriticalSection(&mCriticalSection);
		}
	~CLockInternals()
		{
			::DeleteCriticalSection(&mCriticalSection);
		}

	CRITICAL_SECTION	mCriticalSection;
};

//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// MARK: - CLock

// MARK: Lifecycle methods

//----------------------------------------------------------------------------------------------------------------------
CLock::CLock()
//----------------------------------------------------------------------------------------------------------------------
{
	mInternals = new CLockInternals();
}

//----------------------------------------------------------------------------------------------------------------------
CLock::~CLock()
//----------------------------------------------------------------------------------------------------------------------
{
	Delete(mInternals);
}

// MARK: Instance methods

//----------------------------------------------------------------------------------------------------------------------
bool CLock::tryLock() const
//----------------------------------------------------------------------------------------------------------------------
{
	return ::TryEnterCriticalSection(&mInternals->mCriticalSection);
}

//----------------------------------------------------------------------------------------------------------------------
void CLock::lock() const
//----------------------------------------------------------------------------------------------------------------------
{
	::EnterCriticalSection(&mInternals->mCriticalSection);
}

//----------------------------------------------------------------------------------------------------------------------
void CLock::unlock() const
//----------------------------------------------------------------------------------------------------------------------
{
	::LeaveCriticalSection(&mInternals->mCriticalSection);
}

//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// MARK: - CReadPreferringLockInternals

class CReadPreferringLockInternals {
public:
	CReadPreferringLockInternals()
		{
			::InitializeSRWLock(&mSRWLock);
		}

	SRWLOCK	mSRWLock;
};

//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// MARK: - CReadPreferringLock

// MARK: Lifecycle methods

//----------------------------------------------------------------------------------------------------------------------
CReadPreferringLock::CReadPreferringLock()
//----------------------------------------------------------------------------------------------------------------------
{
	mInternals = new CReadPreferringLockInternals();
}

//----------------------------------------------------------------------------------------------------------------------
CReadPreferringLock::~CReadPreferringLock()
//----------------------------------------------------------------------------------------------------------------------
{
	Delete(mInternals);
}

// MARK: Instance methods

//----------------------------------------------------------------------------------------------------------------------
void CReadPreferringLock::lockForReading() const
//----------------------------------------------------------------------------------------------------------------------
{
	::AcquireSRWLockShared(&mInternals->mSRWLock);
}

//----------------------------------------------------------------------------------------------------------------------
void CReadPreferringLock::unlockForReading() const
//----------------------------------------------------------------------------------------------------------------------
{
	::ReleaseSRWLockShared(&mInternals->mSRWLock);
}

//----------------------------------------------------------------------------------------------------------------------
void CReadPreferringLock::lockForWriting() const
//----------------------------------------------------------------------------------------------------------------------
{
	::AcquireSRWLockExclusive(&mInternals->mSRWLock);
}

//----------------------------------------------------------------------------------------------------------------------
void CReadPreferringLock::unlockForWriting() const
//----------------------------------------------------------------------------------------------------------------------
{
	::ReleaseSRWLockExclusive(&mInternals->mSRWLock);
}

//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// MARK: - CSemaphoreInternals

class CSemaphoreInternals {
public:
	CSemaphoreInternals() : mHandle(CreateEvent(NULL, false, false, TEXT("")))
		{
			::InitializeCriticalSection(&mCriticalSection);
		}
	~CSemaphoreInternals()
		{
			::DeleteCriticalSection(&mCriticalSection);
			::CloseHandle(mHandle);
		}

	CRITICAL_SECTION	mCriticalSection;
	HANDLE				mHandle;
};

//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
// MARK: - CSemaphore

// MARK: Lifecycle methods

//----------------------------------------------------------------------------------------------------------------------
CSemaphore::CSemaphore()
//----------------------------------------------------------------------------------------------------------------------
{
	mInternals = new CSemaphoreInternals();
}

//----------------------------------------------------------------------------------------------------------------------
CSemaphore::~CSemaphore()
//----------------------------------------------------------------------------------------------------------------------
{
	Delete(mInternals);
}

// MARK: Instance methods

//----------------------------------------------------------------------------------------------------------------------
void CSemaphore::signal() const
//----------------------------------------------------------------------------------------------------------------------
{
	// Check if waiting
	if (!::TryEnterCriticalSection(&mInternals->mCriticalSection))
		// Waiting, set event
		::SetEvent(mInternals->mHandle);
	else
		// Not waiting
		::LeaveCriticalSection(&mInternals->mCriticalSection);
}

//----------------------------------------------------------------------------------------------------------------------
void CSemaphore::waitFor() const
//----------------------------------------------------------------------------------------------------------------------
{
	::EnterCriticalSection(&mInternals->mCriticalSection);
	::WaitForSingleObject(mInternals->mHandle, INFINITE);
	::LeaveCriticalSection(&mInternals->mCriticalSection);
}
